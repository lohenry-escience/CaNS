name: run-default

on:
  - pull_request
  - push

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        compiler:
        - name: GNU
        - name: NVIDIA
          version: "24.11"
          year: 2024
        - name: INTEL
          intel_version: 2024.0.0.49564
          hpc_version: 2024.0.0.49589
        compiler_flags:
        - name: "Default"
          flags: ""
        #- name: "FFTW3"
        #  flags: "FFLAGS+=-fopenmp LIBS+=-lfftw3_threads"
        exclude:
          - compiler_flags:
              name: "FFTW3"
            compiler:
              name: "NVIDIA"
          - compiler_flags:
              name: "FFTW3"
            compiler:
              name: "INTEL"
      fail-fast: false #Ensures that jobs run in parallel
    name: build-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
    steps:
    # TODO: Lots of repetition here on setting up the environments.
    - name: Maximize build space
      # TODO: make it local
      # From https://github.com/marketplace/actions/maximize-build-disk-space
      # The important stuff is to resize the partitions. Removals do not do much, if anything
      # Check if it works without the rm -f
      if: matrix.compiler.name == 'NVIDIA'
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 25000
        swap-size-mb: 30000
        remove-dotnet: 'true'
        remove-haskell: 'true'
        remove-docker-images: 'true'
        remove-android: 'true'
    - name: Getting CaNS
      uses: actions/checkout@v4
      with:
        submodules: true
    - name: Get packages
      shell: bash  # Specify the shell explicitly
      # TODO: avoid the if?
      run: |
           sudo apt-get update
           echo "INFO: Installing the ${{ matrix.compiler.name }} compiler"
           if [ ${{ matrix.compiler.name }} == "NVIDIA" ]
           then
             args="YEAR=${{ matrix.compiler.year }} VERSION=${{ matrix.compiler.version }}"
           fi
           if [ ${{ matrix.compiler.name }} == "INTEL" ]
           then
             args="INTEL_VERSION=${{ matrix.compiler.intel_version}} HPC_VERSION=${{ matrix.compile.hpc_version }}"
           fi	   
           source ./tests/scripts/install-${{ matrix.compiler.name }}.sh $args
    - name: Compile dependencies
      run: |
           source ./tests/scripts/setenv-${{ matrix.compiler.name }}.sh
           make libs FCOMP=${{ matrix.compiler.name }}
    - name: Upload compiled dependencies
      uses: actions/upload-artifact@v4
      with:
        name: compiled-libs-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: dependencies/
    - name: Compile CaNS
      run: |
           source ./tests/scripts/setenv-${{ matrix.compiler.name }}.sh
           make FCOMP=${{ matrix.compiler.name }} ${{ matrix.compiler_flags.flags }}
           source ./get_libs.sh
    - name: Upload CaNS
      uses: actions/upload-artifact@v4
      with:
        name: cans-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: run/cans
    - name: Upload libs
      uses: actions/upload-artifact@v4
      with:
        name: needed-libs-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: libs/
  test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-name: [lid_driven_cavity, start_stop]
        compiler:
        - name: GNU
        - name: INTEL
        - name: NVIDIA
        #  version: "24.11" 
        compiler_flags:
        - name: "Default"
          flags: ""
      fail-fast: false #Ensures that jobs run in parallel
    needs: build
    name: test-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}-${{ matrix.test-name }}
    steps:
    - name: Getting CaNS
      uses: actions/checkout@v4
      with:
        submodules: false
    - name: Getting compiled libraries
      uses: actions/download-artifact@v4
      with:
        name: compiled-libs-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: dependencies/
    - name: Getting needed libraries
      uses: actions/download-artifact@v4
      with:
        name: needed-libs-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: libs/
    - name: Getting compiled CaNS
      uses: actions/download-artifact@v4
      with:
        name: cans-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}
        path: run/
    - name: Get packages
      shell: bash  # Specify the shell explicitly
      run: |
           sudo apt-get update
           sudo apt-get install libopenmpi-dev libfftw3-dev pax-utils
    - name: Get Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.13
    - name: Get Python packages for testing
      shell: bash  # Specify the shell explicitly
      run: |
        python -m pip install --upgrade pip
        pip install numpy flake8 pytest f90nml pyelftools
    - name: Run the test
      shell: bash  # Specify the shell explicitly
      run: |
           #source ./tests/scripts/setenv-${{ matrix.compiler.name }}.sh
           which mpirun
           ldd /usr/bin/mpirun
           mpirun --version
           export LD_LIBRARY_PATH=$(pwd)/libs/:${LD_LIBRARY_PATH}
           echo ${LD_LIBRARY_PATH}
           chmod u+rwx ./libs/*
           chmod +x ./run/cans
           cd tests/${{ matrix.test-name }}
           if [ "${{ matrix.compiler.name }}" == "INTEL" ]
           then
           source ./testit-INTEL.sh
           else
           source ./testit.sh
           fi
    - name: Upload log files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: logs-${{ matrix.compiler.name }}-${{ matrix.compiler_flags.name }}-${{ matrix.test-name }}
        path: run/*log
    - name: Print log(s)
      shell: bash  # Specify the shell explicitly
      run: |
           for f in $(ls run/*log)
           do
             echo "Printing the log file "$f
             cat $f
           done
